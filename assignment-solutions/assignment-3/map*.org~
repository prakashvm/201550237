#+TITLE: ITWS2 2017 SPRINT IIITH Assignment 3
#+AUTHOR: PRAKASH MUDHOLKAR
#+DATE: [2017-04-21 Thu]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  This contains solution of Assignment 3.

* Problems
  Assignment 3 Problem Set is taken from http://pascal.iiit.ac.in/~itws2/docs/assignments/more-with-lists/index.html#orga2e5c19

* Solutions

** Problem 3
*** Question
    Implement a function map* which takes a function op and a nested list l as arguments and applies the function to every element of the list. 
	
    
*** Solution
    
#+NAME: map*
#+BEGIN_SRC racket

#lang racket
(require rackunit)

(define (map* op l)
  (define (list x)
    (cond ((null? x) x)
          ((pair? x) (map list x))
          (else (op x))))
  (map list l))


(check-equal? (map* even? '(2 (4 3) ())) '(#t (#t #f) ()) "test 1")
(check-equal? (map* add1 '((1 2) 3 (4 5) (6 7))) '((2 3) 4 (5 6) (7 8)) "test 2")
(check-equal? (map* boolean? '(1 #t #f -2 0)) '(#f #t #t #f #f) "test 3")

#+END_SRC


* Tangle

** Sources
#+BEGIN_SRC racket :tangle split-list.rkt :eval no :noweb yes
<<map*>>
#+END_SRC
