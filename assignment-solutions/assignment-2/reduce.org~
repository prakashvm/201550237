#+TITLE: ITWS2 2017 SPRINT IIITH Assignment 2
#+AUTHOR: PRAKASH MUDHOLKAR
#+DATE: [2017-04-21 Thu]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  This contains solution of Assignment 2.

* Problems
  Assignment 2 Problem Set is taken from http://pascal.iiit.ac.in/~itws2/docs/assignments/higher-order-functions/index.html#org79796a7

* Solutions

** Problem 1
*** Question
    Write a function reduce that takes a binary function f, an initial value init and a list ls and reduces the list to an answer. 
	
    
*** Solution
    
#+NAME: reduce
#+BEGIN_SRC racket

#lang racket
(require rackunit)

(define reduce
  (lambda (f init ls)
    (if (empty? ls)
        init
        (reduce f (f init (first ls)) (rest ls)))))

(define binary-and 
  (lambda (x y)
    (and x y)))

(define (all-satisfy predicate ls) 
  (reduce binary-and #t (map predicate ls)))


(check-equal?  (all-satisfy even? '(2 3 4)) #f "All-even-test #f")
(check-equal?  (all-satisfy even? '(2 4 6)) #t "All-even-test #t")
(check-equal?  (all-satisfy boolean? '(#t #f 6)) #f "All-boolean-test #f")
(check-equal?  (all-satisfy boolean? '(#t #f #t)) #t "All-boolean-test #t")

#+END_SRC


* Tangle

** Sources
#+BEGIN_SRC racket :tangle reduce.rkt :eval no :noweb yes
<<reduce>>
#+END_SRC
